package fr.dawan.project.tools;

import java.io.ByteArrayInputStream;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObjectBuilder;
import javax.json.stream.JsonParser;
import javax.json.stream.JsonParser.Event;

import fr.dawan.project.model.Person;

public class JsonTools {

	public static <T> String toJsonStream(T obj) throws IllegalArgumentException, IllegalAccessException {
		JsonObjectBuilder objectBuilder = Json.createObjectBuilder();
		Class<? extends Object> clazz = obj.getClass();
		Field[] declaredFields = clazz.getDeclaredFields();
		List<Field> list = Arrays.asList(declaredFields);
		list.stream().map(f -> fieldToJSON(f, obj, objectBuilder)).collect(Collectors.toList());
		return objectBuilder.build().toString();
	}

	public static Void fieldToJSON(Field f, Object obj, JsonObjectBuilder objectBuilder) {
		try {
			f.setAccessible(true);
			if(f.getType()==String.class){
				objectBuilder.add(f.getName(), f.get(obj).toString());	
			}
			else if(f.getType().isArray()){
				JsonArrayBuilder jsonArray = Json.createArrayBuilder();
				jsonArray.add(f.get(obj).toString());
				objectBuilder.add(f.getName(), jsonArray);
			}
			
		} catch (IllegalArgumentException | IllegalAccessException e) {

		}
		return null;

	}

	public static <T> T fromJson(String jsonStr, Class<T> clazz) throws InstantiationException, IllegalAccessException {
		Field[] fields = clazz.getDeclaredFields();
		T instance = clazz.newInstance();
		ByteArrayInputStream bis = new ByteArrayInputStream(jsonStr.getBytes());
		try (JsonParser parser = Json.createParser(bis)) {
			while (parser.hasNext()) {
				Event event = parser.next();
				if (event == Event.KEY_NAME) {
					String key = parser.getString();
					for (Field field : fields) {
						if(field.getName().equals(key)){
							parser.next();
							field.setAccessible(true);
							field.set(instance, parser.getString());
						}
					}
					
				}

			}
		}

		return instance;
	}

	public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException, InstantiationException {
		Person p = new Person("antoine", "body");
		//p.setPhones(new String[]{"11111","222222"});
		String json = toJsonStream(p);
		System.out.println(json);
		Person fromJson = fromJson(json,p.getClass());
		System.out.println("from Json");
		System.out.println(fromJson);
		
	}

}
